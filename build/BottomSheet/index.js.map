{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/BottomSheet/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,UAAU,EAAwB,QAAQ,EAAE,MAAM,cAAc,CAAC;AAE1E,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AA2B/B,MAAM,qBAAqB,GAAgD,QAAQ,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,iBAAiB,CAClH,gBAAgB,EAChB,iBAAiB,CAClB,CAAC,CAAC,CAAC,iBAAiB,CAAyB,gBAAgB,EAAC,oBAAoB,CAAC,CAAC;AAErF,MAAM,UAAU,yBAAyB,CAAC,KAAuB;IAC/D,OAAO;QACL,GAAG,KAAK;QACR,gBAAgB,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE;YAClD,KAAK,EAAE,gBAAgB,EAAE,CAAC,QAAQ,CAAC,CAAC;QACtC,CAAC;KAEF,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAuB;IAC1D,OAAO,CAAC,qBAAqB,CAAC,IAAI,yBAAyB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AACzE,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,KAAuB;IACjD,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC3C,IAAG,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAC,CAAC;QAC5B,OAAM,CACJ,CAAC,oBAAoB,CAAC,IAAI,KAAK,CAAC,EAAG,CACpC,CAAA;IACH,CAAC;SAAI,CAAC;QACJ,OAAO,CACP,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAC3C;MAAA,CAAC,oBAAoB,CAAC,IAAI,KAAK,CAAC,EAClC;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;IACF,CAAC;AAEH,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { Dimensions, NativeSyntheticEvent, Platform } from 'react-native';\n\nimport { Host } from '../Host';\nexport type PresentationDetent = \n  | 'medium' \n  | 'large' \n  | 'auto'\n  | `height:${number}`\n  | `fraction:${number}`;\nexport type BottomSheetProps = {\n  /**\n   * The children of the `BottomSheet` component.\n   */\n  children: any;\n  /**\n   * Whether the `BottomSheet` is opened.\n   */\n  isOpened: boolean;\n  /**\n   * Callback function that is called when the `BottomSheet` is opened.\n   */\n  onIsOpenedChange: (isOpened: boolean) => void;\n  detents: Array<PresentationDetent>;\n};\n\ntype NativeBottomSheetProps = Omit<BottomSheetProps, 'onIsOpenedChange'> & {\n  onIsOpenedChange: (event: NativeSyntheticEvent<{ isOpened: boolean }>) => void;\n};\n\nconst BottomSheetNativeView: React.ComponentType<NativeBottomSheetProps> = Platform.OS === \"ios\" ? requireNativeView(\n  'ExpoProbuiltUi',\n  'BottomSheetView'\n) : requireNativeView<NativeBottomSheetProps>('ExpoProbuiltUi','AndroidBottomSheet');\n\nexport function transformBottomSheetProps(props: BottomSheetProps): NativeBottomSheetProps {\n  return {\n    ...props,\n    onIsOpenedChange: ({ nativeEvent: { isOpened } }) => {\n      props?.onIsOpenedChange?.(isOpened);\n    },\n  \n  };\n}\n\n/**\n * `<BottomSheet>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function BottomSheetPrimitive(props: BottomSheetProps) {\n  return <BottomSheetNativeView {...transformBottomSheetProps(props)} />;\n}\n\nexport function BottomSheet(props: BottomSheetProps) {\n  const { width } = Dimensions.get('window');\n  if(Platform.OS === \"android\"){\n    return(\n      <BottomSheetPrimitive {...props} />\n    )\n  }else{\n    return (\n    <Host style={{ position: 'absolute', width }}>\n      <BottomSheetPrimitive {...props} />\n    </Host>\n  );\n  }\n  \n}\n"]}